service: alexa-list-sync

frameworkVersion: '2'

custom:
  secrets: ${file(secrets.json)}
  pythonRequirements:
     dockerizePip: non-linux
  default_stage: dev

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221

  region: ${self:custom.secrets.REGION, 'us-east-1'}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        - !Join ['/', [!Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter', !Ref AirtableKeyParameter]]
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        - !Join ['/', [!GetAtt GroceryListBucket.Arn, '${self:custom.secrets.printListKey}']]
    

  environment:
    paramNameAirtable: !Ref AirtableKeyParameter
    airtableBaseId: ${self:custom.secrets.airtableBaseId}
    airtableTableName: ${self:custom.secrets.airtableTableName}
    airtableListView: ${self:custom.secrets.airtableListView}
    airtableAllView: ${self:custom.secrets.airtableAllView}
    printBucketName: !Ref GroceryListBucket
    printListKey: ${self:custom.secrets.printListKey}

plugins:
   - serverless-python-requirements

package:
  exclude:
    - img/**

functions:
  item-added:
    handler: alexa-list.item_added
    events:
      - http:
          path: added
          method: post
          cors: true
  item-removed:
    handler: alexa-list.item_removed
    events:
      - http:
          path: removed
          method: post
          cors: true
  print-start:
    handler: alexa-list.print_start
    events:
      - http:
          path: print
          method: get
          cors: true
  print-list:
    handler: alexa-list.list_list
    events:
      - http:
          path: list
          method: get
          cors: true
  print-stop:
    handler: alexa-list.print_stop
    events:
      - http:
          path: stop
          method: get
          cors: true

resources:
  Resources:
    GroceryListBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-${self:custom.secrets.printBucketName}
        AccessControl: PublicRead
    GroceryListBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref GroceryListBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Join ['/', [!GetAtt GroceryListBucket.Arn, '*']]
              Principal: "*"
    AirtableKeyParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: ${self:service}-${self:provider.stage}-${self:custom.secrets.airtableKeyName}
        Description: "Airtable account API key"
        Type: String # TODO: Change to SecureString
        Value: ${self:custom.secrets.airtableAPIKey}
